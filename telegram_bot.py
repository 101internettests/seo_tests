import os
import requests
import logging
from typing import Dict, Any
from datetime import datetime

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

logger = logging.getLogger(__name__)

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self, bot_token: str = None, chat_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN)
            chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è CHAT_ID)
        """
        self.bot_token = bot_token or os.getenv('BOT_TOKEN')
        self.chat_id = chat_id or os.getenv('CHAT_ID')
        
        if not self.bot_token:
            logger.warning("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.chat_id:
            logger.warning("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def send_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot_token or not self.chat_id:
            logger.error("BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
            }
            
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get('ok'):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    def send_statistics(self, sites_results: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram

        Args:
            sites_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_sites = len(sites_results)
            total_pages = sum(len(site_data['results']) for site_data in sites_results.values())
            successful_pages = 0

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for site_data in sites_results.values():
                for result in site_data['results']:
                    if result.get('status') == 'success':
                        successful_pages += 1

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
            success_percentage = (successful_pages / total_pages * 100) if total_pages > 0 else 0

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ SEO —ç–ª–µ–º–µ–Ω—Ç–∞–º
            pages_with_title = 0
            pages_with_description = 0
            total_title_count = 0
            total_description_count = 0

            for site_data in sites_results.values():
                for result in site_data['results']:
                    if result.get('status') == 'success' and 'headings' in result:
                        headings = result['headings']
                        title_count = headings.get('title_count', 0)
                        description_count = headings.get('description_count', 0)
                        
                        if title_count > 0:
                            pages_with_title += 1
                            total_title_count += title_count
                        if description_count > 0:
                            pages_with_description += 1
                            total_description_count += description_count

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            message = f"""
<b>üìä –û–¢–ß–ï–¢ –û–ë –ê–ù–ê–õ–ò–ó–ï SEO</b>
<i>{timestamp}</i>

<b>üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
üåê –°–∞–π—Ç–æ–≤: {total_sites}
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {total_pages}
‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_pages}
‚ùå –û—à–∏–±–æ–∫: {total_pages - successful_pages}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_percentage:.1f}%

<b>üîç SEO –≠–õ–ï–ú–ï–ù–¢–´:</b>
üìù Title: {pages_with_title}/{successful_pages} ({(pages_with_title/successful_pages*100) if successful_pages > 0 else 0:.1f}%)
üìÑ Description: {pages_with_description}/{successful_pages} ({(pages_with_description/successful_pages*100) if successful_pages > 0 else 0:.1f}%)

<b>üåê –î–ï–¢–ê–õ–ò –ü–û –°–ê–ô–¢–ê–ú:</b>"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∞–π—Ç—É (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            site_count = 0
            for site_key, site_data in sites_results.items():
                if site_count >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–∞–π—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    break
                    
                site_info = site_data['site_info']
                results = site_data['results']
                
                site_successful = sum(1 for r in results if r.get('status') == 'success')
                site_success_percentage = (site_successful / len(results) * 100) if results else 0
                
                message += f"""

<b>{site_info['name']}</b> ({site_key})
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {len(results)}
‚úÖ –£—Å–ø–µ—à–Ω–æ: {site_successful}
‚ùå –û—à–∏–±–æ–∫: {len(results) - site_successful}
üìä –£—Å–ø–µ—Ö: {site_success_percentage:.1f}%"""
                
                site_count += 1
            
            if len(sites_results) > 5:
                message += f"""

... –∏ –µ—â–µ {len(sites_results) - 5} —Å–∞–π—Ç–æ–≤"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            changes_count = 0
            for site_data in sites_results.values():
                for result in site_data['results']:
                    if result.get('status') == 'success' and 'comparison' in result:
                        comparison = result['comparison']
                        if comparison.get('status') == 'changes_detected':
                            changes_count += 1
            
            if changes_count > 0:
                message += f"""

<b>üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:</b>
üìà –°—Ç—Ä–∞–Ω–∏—Ü —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: {changes_count}"""
            
            message += f"""
<i> üí• –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á–µ—Ç: https://docs.google.com/spreadsheets/d/1NTyI48H4woktkCqnvjGsMOWZbnqs8oCMMNP3j_AJDkw/edit?gid=1041857980#gid=1041857980 </i>"
<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = self.send_message(message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if changes_count > 0:
                self.send_detailed_changes(sites_results)
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è Telegram: {e}")
            return False

    def send_error_notification(self, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        message = f"""
<b>‚ö†Ô∏è –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê</b>
<i>{timestamp}</i>

{error_message}

<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""

        return self.send_message(message)

    def send_detailed_changes(self, sites_results: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Telegram

        Args:
            sites_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes_details = []
            
            for site_data in sites_results.values():
                for result in site_data['results']:
                    if result.get('status') == 'success' and 'comparison' in result:
                        comparison = result['comparison']
                        if comparison.get('status') == 'changes_detected':
                            url = result.get('url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞')
                            changes = comparison.get('changes', {})
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_changes = []
                            for change_type, change_data in changes.items():
                                if isinstance(change_data, dict) and 'difference' in change_data:
                                    diff = change_data['difference']
                                    if diff > 0:
                                        page_changes.append(f"‚ûï {change_type}: +{diff}")
                                    elif diff < 0:
                                        page_changes.append(f"‚ûñ {change_type}: {diff}")
                                elif isinstance(change_data, dict) and change_data.get('type') == 'content_change':
                                    page_changes.append(f"üîÑ {change_type}: –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                            
                            if page_changes:
                                changes_details.append(f"üîó {url}\n" + "\n".join(f"   {change}" for change in page_changes))
            
            if not changes_details:
                return True  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            message = f"""
<b>üîÑ –î–ï–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø</b>
<i>{timestamp}</i>

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            current_message = message
            for detail in changes_details:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
                if len(current_message + detail) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.send_message(current_message + "\n<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>")
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    current_message = f"""
<b>üîÑ –î–ï–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)</b>
<i>{timestamp}</i>

{detail}"""
                else:
                    current_message += f"\n{detail}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_message != message:
                return self.send_message(current_message + "\n<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Telegram: {e}")
            return False